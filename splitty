#!/usr/bin/env python3

import time
import math
import os
import sys
import json
import toml
import copy
import itertools
from datetime import datetime
from pynput import keyboard
from rich.table import Table
from rich.live import Live
from rich.console import Console

CONFIG_LOCATION = f'{os.environ.get("HOME")}/.config/splitty'
DEFAULT_CONFIG = """[keybinds]
pause = "P"
exit = "O"
split = "I"
reset = "R"
"""

def format_time(time):
    in_millis = int(time/1000000)
    millis = in_millis % 1000
    seconds = math.floor(in_millis/1000) % 60
    minutes = math.floor(in_millis/60000) % 60
    hours = math.floor(in_millis/3600000)
    return f'{hours:02}:{minutes:02}:{seconds:02}:{millis:03}'

def load_file(profile, name):
    with open(f'{CONFIG_LOCATION}/{profile}/{name}', 'r') as file:
        return json.load(file)
def save_file(profile, name, data):
    with open(f'{CONFIG_LOCATION}/{profile}/{name}', 'w') as file:
        return json.dump(data, file, indent=4)

class Splitty:

    def __init__(self, profile=None):

        with open(CONFIG_LOCATION+'/splitty.cfg', 'r') as file:
            data = toml.load(file)

        self.profile = profile
        self.running = True
        self.start_time = 0
        self.paused = True
        self.saved_time = 0
        self.split_times = []
        self.split_index = 0

        if profile is None:
            self.splits = []
            self.golds = {}
        else:
            self.splits = load_file(profile, "splits")
            self.golds = load_file(profile, "golds")

        self.new_golds = copy.deepcopy(self.golds)
        self.pause_key = data["keybinds"]["pause"]
        self.close_key = data["keybinds"]["exit"]
        self.reset_key = data["keybinds"]["reset"]
        self.split_key = data["keybinds"]["split"]

    def generate_table(self):
        table = Table.grid()

        if not self.paused:
            time_passed = time.time_ns() - self.start_time
        else:
            time_passed = self.saved_time
        table.add_row("Current time", style="bold")
        table.add_row(format_time(time_passed))

        if self.splits != []:
            splits = Table.grid()
            splits.add_column("Name")
            splits.add_column("Seperator")
            splits.add_column("Time")
            splits.add_column("Seperator")
            splits.add_column("Gold")
            splits.add_row("Name", "", "Time", "", "Best time", style="bold")
            for i, (name, time_taken) in enumerate(itertools.zip_longest(self.splits, self.split_times, fillvalue='--:--:--:---')):
                if name not in self.golds:
                    gold_time = '--:--:--:---'
                else:
                    gold_time = format_time(self.golds[name])
                if i == self.split_index:
                    splits.add_row(name, '    ', format_time(time_passed), '    ', gold_time)
                else:
                    splits.add_row(name, '    ', time_taken, '    ', gold_time)
            table.add_row(splits)

        return table

    def end(self):
        if self.paused:
            final_time = self.saved_time
        else:
            final_time = time.time_ns() - self.start_time
        set_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        with open(f'{os.environ.get("HOME")}/splitty/history', 'a') as file:
            file.write(f'{set_time} {final_time/1000000}\n')
        self.running = False

    def on_press(self, key):
        if key == keyboard.KeyCode(char=self.close_key):
            self.end()
        elif key == keyboard.KeyCode(char=self.pause_key):
            self.paused = not(self.paused)
            if self.paused:
                self.saved_time = time.time_ns() - self.start_time
            else:
                self.start_time = time.time_ns() - self.saved_time
        elif key == keyboard.KeyCode(char=self.split_key):
            if self.paused:
                final_time = self.saved_time
            else:
                final_time = time.time_ns() - self.start_time
            self.split_times.append(format_time(final_time))
            if self.splits != []:
                if not(self.splits[self.split_index] in self.golds) or final_time < self.golds[self.splits[self.split_index]]:
                    self.new_golds[self.splits[self.split_index]] = final_time

            self.split_index += 1
            if self.split_index == len(self.splits) and self.splits != []:
                save_file(self.profile, 'golds', self.new_golds)
                self.end()
        elif key == keyboard.KeyCode(char=self.reset_key):
            self.end()
            self.__init__(self.profile)

    def on_release(self, key):
        return

    def main(self):
        self.start_time = time.time_ns()
        with Live(self.generate_table(), refresh_per_second=100) as self.live:
            keyboard.Listener(
                on_press=self.on_press,
                on_release=self.on_release
            ).start()
            while self.running:
                time.sleep(0.01)
                self.live.update(self.generate_table())

if __name__ == '__main__':

    if sys.argv[1] == 'init':
        os.system('mkdir $HOME/.config/splitty')
        with open(CONFIG_LOCATION+'/splitty.cfg', 'w') as file:
            file.write(DEFAULT_CONFIG)
    elif sys.argv[1] == 'make':
        profile_name = sys.argv[2]
        os.system(f'mkdir $HOME/.config/splitty/{profile_name}')
        with open(f'{CONFIG_LOCATION}/{profile_name}/splits', 'w') as file:
            file.write('[]')
        with open(f'{CONFIG_LOCATION}/{profile_name}/golds', 'w') as file:
            file.write('{}')
    elif sys.argv[1] == 'start':
        if len(sys.argv) == 2:
            inst = Splitty()
            inst.main()
        else:
            profile = sys.argv[2]
            inst = Splitty(profile)
            inst.main()
