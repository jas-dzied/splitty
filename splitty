#!/usr/bin/env python3

import time
import math
import pynput
import sys
import os
from rich.text import Text
from rich.live import Live
from rich.table import Table
from rich.console import Console
from datetime import datetime

on = False
start_time = time.time_ns()
last_paused = start_time
running = True

def generate_table() -> Table:

    global on
    global start_time
    global last_paused

    table = Table.grid()

    if on:
        current_time = int((time.time_ns()-start_time)/1000000)
        hours = math.floor(current_time/(1000*60*60))
        minutes = math.floor(current_time/(1000*60)) % 60
        seconds = math.floor(current_time/(1000)) % 60
        millis = current_time % 1000
        result = Text(f'{hours:02}:{minutes:02}:{seconds:02}:{millis:03}', style='bold green')
    else:
        current_time = int((last_paused-start_time)/1000000)
        hours = math.floor(current_time/(1000*60*60))
        minutes = math.floor(current_time/(1000*60)) % 60
        seconds = math.floor(current_time/(1000)) % 60
        millis = current_time % 1000
        result = Text(f'{hours:02}:{minutes:02}:{seconds:02}:{millis:03}', style='bold blue')

    table.add_row(result)
    return table

def on_press(key):

    global on
    global start_time
    global last_paused
    global running

    if key == pynput.keyboard.KeyCode(char='p'):
        on = not(on)
        if not(on):
            last_paused = time.time_ns()
        else:
            time_diff = last_paused - start_time
            start_time = time.time_ns() - time_diff
    elif key == pynput.keyboard.KeyCode(char='o'):
        running = False
        if not(on):
            time_diff = last_paused - start_time
            start_time = time.time_ns() - time_diff

        final_time = int((time.time_ns() - start_time)/1000000)
        set_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        with open(f'{os.environ.get("HOME")}/splitty/history', 'a') as file:
            file.write(f'{set_time} {final_time}\n')


def on_release(key):
    return

home = os.environ.get('HOME')

if '-h' in sys.argv:
    print('Splitty - A minimal terminal-based speedrun timer for linux.')
    print('Usage:')
    print('     splitty -[h/i/l/c]')
    print('        -h : displays this help message')
    print('        -i : installs splitty')
    print('        -l [key=speed] [--descending]: lists your past times. If no key is provided, it will sort by speed.')
    print('        -c : clears time history')
    print('     If no flags are provided, the timer will start. Use "p" to pause/unpause, and "o" to exit.')
elif '-i' in sys.argv:
    os.system(f'mkdir $HOME/splitty')
    os.system(f'touch $HOME/splitty/history')
    os.system(f'touch $HOME/splitty/history.bak')
elif '-l' in sys.argv:

    if '-d' in sys.argv or '--descending' in sys.argv:
        if len(sys.argv) == 4:
            key = True
        elif len(sys.argv) == 3:
            key = False
    else:
        if len(sys.argv) == 3:
            key = True
        elif len(sys.argv) == 2:
            key = False

    with open(f'{home}/splitty/history', 'r') as file:
        content = file.read()

    key = sys.argv[2] if key else "speed"
    times = [[record.split(' ')[0], record.split(' ')[1], int(record.split(' ')[2])] for record in content.splitlines()]
    sort_ind = {
        "date": 0,
        "time": 1,
        "speed": 2
    }[key]
    result = sorted(times, key=lambda x: x[sort_ind], reverse=('-d' in sys.argv or '--descending' in sys.argv))
    console = Console()
    table = Table()
    table.add_column("Date")
    table.add_column("Time")
    table.add_column("Speed (s)")
    for result_ in result:
        time_taken = round(result_[2]/1000, 2)
        table.add_row(result_[0], result_[1], str(time_taken))
    console.print(table)

elif '-c' in sys.argv:
    with open(f'{home}/splitty/history', 'r') as file:
        backup = file.read()
    with open(f'{home}/splitty/history', 'w') as file:
        file.write('')
    with open(f'{home}/splitty/history.bak', 'w') as file:
        file.write(backup)
else:
    with Live(generate_table(), refresh_per_second=40) as live:
        listener = pynput.keyboard.Listener(on_press=on_press, on_release=on_release)
        listener.start()
        while running:
            time.sleep(0.05)
            live.update(generate_table())
